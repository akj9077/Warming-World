# -*- coding: utf-8 -*-
"""WarmingWorldWeek1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ud0BH-K4qc3XfFbaJdaR6l5PBB8PNj4K
"""

#Part 0
import numpy as np
ran=np.random.randint(100,size=(5,5))
print(ran)

for a in range(5):
  print(ran[a][len(ran)//2])
  print("mean",ran[a].mean())
k=ran.mean()
greater=np.array(ran[ran>ran.mean()])
print(greater)

def numpy_spiral_order(matrix):
    result = []
    top, bottom, left, right = 0, matrix.shape[0] - 1, 0, matrix.shape[1] - 1

    while top <= bottom and left <= right:
        # Traverse from left to right along the top row
        result.extend(matrix[top, left:right + 1])
        top += 1

        # Traverse from top to bottom along the right column
        if top <= bottom:
            result.extend(matrix[top:bottom + 1, right])
            right -= 1

        # Traverse from right to left along the bottom row
        if left <= right and top <= bottom:
            result.extend(matrix[bottom, right:left - 1:-1])
            bottom -= 1

        # Traverse from bottom to top along the left column
        if top <= bottom and left <= right:
            result.extend(matrix[bottom:top - 1:-1, left])
            left += 1

    return list(result)

import pandas as pd
path='/content/drive/MyDrive/videogamesales (1).csv'
df=pd.read_csv(path)
print(df)

df['Global Sales']=df['NA_Sales']+df['EU_Sales']+df['JP_Sales']+df['Other_Sales']
print(df)

sorted_df=df.sort_values(by='Global Sales',ascending=False)
print(sorted_df)

import matplotlib.pyplot as plt
plt.plot(df['Genre'],df['Global Sales'])

df['sum']=df['EU_Sales']+df['JP_Sales']
specificcols=['Name','Platform','Year','sum']
grand_theft_auto_games = df[df['Name'].str.contains('Grand Theft Auto', case=False, na=False)][specificcols]
print(grand_theft_auto_games)

a=sum(df['NA_Sales'])
b=sum(df['JP_Sales'])
c=sum(df['EU_Sales'])
d=sum(df['Other_Sales'])
labels=['NA','JP','EU','Other']
values=[a,b,c,d]
plt.pie(values,labels=labels)

#Part 1
import numpy as np
import matplotlib.pyplot as plt

# Set the number of samples
n_samples = 10000

# 1. Beta Distribution
a, b = 4, 20
beta_samples = np.random.beta(a, b, n_samples) * 100

# 2. Exponential Distribution
scale = 0.1
exp_samples = np.random.exponential(scale, n_samples) * 100

# 3. Gamma Distribution
gamma_shape, gamma_scale = 2, 0.1
gamma_samples = np.random.gamma(gamma_shape, gamma_scale, n_samples) * 100

# 4. Laplace Distribution
laplace_scale, laplace_loc = 0.5, 0
laplace_samples = np.random.laplace(laplace_loc, laplace_scale, n_samples) * 100

# 5. Normal Distribution
normal_loc, normal_scale = 0, 3
normal_samples = np.random.normal(normal_loc, normal_scale, n_samples)

# 6. Poisson Distribution
lam = 3
poisson_samples = np.random.poisson(lam, n_samples)

# Set up the 3x2 subplot layout
fig, axs = plt.subplots(3, 2, figsize=(10, 12))

# Plot histograms for each distribution
# 1. Beta Distribution
axs[0, 0].hist(beta_samples, bins=np.arange(-5, 51, 1), color='blue', edgecolor='black')
axs[0, 0].set_title('Beta Distribution (a=4, b=20)')
axs[0, 0].set_xlim([-5, 50])

# 2. Exponential Distribution
axs[0, 1].hist(exp_samples, bins=np.arange(-1, 51, 1), color='green', edgecolor='black')
axs[0, 1].set_title('Exponential Distribution (scale=0.1)')
axs[0, 1].set_xlim([-1, 50])

# 3. Gamma Distribution
axs[1, 0].hist(gamma_samples, bins=np.arange(-1, 51, 1), color='red', edgecolor='black')
axs[1, 0].set_title('Gamma Distribution (shape=2, scale=0.1)')
axs[1, 0].set_xlim([-1, 50])

# 4. Laplace Distribution
axs[1, 1].hist(laplace_samples, bins=np.arange(-1, 51, 1), color='purple', edgecolor='black')
axs[1, 1].set_title('Laplace Distribution (scale=0.5)')
axs[1, 1].set_xlim([-1, 50])

# 5. Normal Distribution
axs[2, 0].hist(normal_samples, bins=np.arange(-10, 12, 1), color='orange', edgecolor='black')
axs[2, 0].set_title('Normal Distribution (loc=0, scale=3)')
axs[2, 0].set_xlim([-10, 11])

# 6. Poisson Distribution
axs[2, 1].hist(poisson_samples, bins=np.arange(-1, 12, 1), color='cyan', edgecolor='black')
axs[2, 1].set_title('Poisson Distribution (lam=3)')
axs[2, 1].set_xlim([-1, 11])

# Adjust layout
plt.tight_layout()

# Show the plot
plt.show()

#Part2
df1=pd.read_csv('/content/drive/MyDrive/matrix.csv')
#print(df1)
matrix = df1.values
upper_diagonal=np.diag(matrix,k=1)
print(upper_diagonal)

data = [[5,5,84,3,9],[6,11,1,55,58],[1,20,48,12,36],[8,4,41,93,98],[6,17,64,0,13]]
df = pd.DataFrame(data)
#print(df)
matrix = df.values
upper_diagonal_elements = []
for j in range(matrix.shape[1]):
    upper_diagonal_elements.extend(matrix[np.arange(j),j])
print(upper_diagonal_elements)

# Calculate mean, median, and standard deviation along the x-axis
mean_x = np.mean(matrix, axis=0)
median_x = np.median(matrix, axis=0)
std_dev_x = np.std(matrix, axis=0)

print("Mean (x-axis):", np.around(mean_x, 2))
print("Median (x-axis):", np.around(median_x, 2))
print("Standard Deviation (x-axis):", np.around(std_dev_x, 2))

# Calculate the determinant
determinant = np.linalg.det(matrix)

print("Determinant:", np.around(determinant, 2))

# Calculate the inverse or pseudo-inverse
if determinant != 0:
    inverse = np.linalg.inv(matrix)
    print("Inverse:\n", np.around(inverse, 2))
else:
    pseudo_inverse = np.linalg.pinv(matrix)
    print("Pseudo-Inverse:\n", np.around(pseudo_inverse, 2))

# (a) Sort along vertical
sorted_vertical = np.sort(matrix, axis=0)
print(sorted_vertical)

# (b) Sort along horizontal
sorted_horizontal = np.sort(matrix, axis=1)
print(sorted_horizontal)

# (c) Flatten and sort
flattened_sorted = np.sort(matrix.flatten())
flattened_sorted
#couldn't do the remaining 2 tasks :(